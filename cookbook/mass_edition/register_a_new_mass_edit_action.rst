How to Register a New Mass Edit Action on Products
==================================================

The Akeneo PIM comes with a number of mass edit actions.
It also comes with a flexible way to define your own mass edit action
on selected products.


Prerequisite
------------
The mass edit action uses the `BatchBundle
<https://github.com/akeneo/BatchBundle/>`_ in order to run mass edit in background. Readers and Writers are already
created so in this cookbook we will focus on how to create a Mass Edit Action and create a Processor.
For more information on how to create Jobs, Readers, Processors, or Writers please see :ref:`create-specific-connector`.

Work with a custom Acme bundle
------------------------------
Your custom Mass Edit actions have to be in a custom Acme bundle which inherit our ``EnrichBundle``.
Once your bundle is created, we must inform Symfony it inherits our Bundle:

.. code-block:: php

    # /src/Acme/Bundle/EnrichBundle/AcmeEnrichBundle.php
    <?php

    namespace Acme\Bundle\EnrichBundle;

    use Symfony\Component\HttpKernel\Bundle\Bundle;

    class AcmeEnrichBundle extends Bundle
    {
        public function getParent()
        {
            return 'PimEnrichBundle';
        }
    }

Phase 1: Create the Operation
------------------------------

.. tip::

    **Operations** are designed to build and transport the configuration (*eventually via a form*) that will be sent to the background job.
    No item is updated from here!

The first step is to create a new class in the Operation folder that extends ``AbstractMassEditOperation`` and declare this new class as a service in the mass_actions.yml file

The method ``getBatchJobCode()`` is very important as it determines which job process to use. In our example we will use the ``capitalize_values`` job.

The ``getItemsName()`` method is used for the UI, in order to properly show with which items the user is working on. For this one, we are working on 'product' type.

.. literalinclude:: ../../src/Acme/Bundle/EnrichBundle/MassEditAction/Operation/CapitalizeValues.php
   :language: php
   :prepend: // /src/Acme/Bundle/EnrichBundle/MassEditAction/Operation/CapitalizeValues.php
   :linenos:

2 things will be sent to the Job:
  - ``actions`` : the raw configuration actions, you define **what you want here**. It will be available within your Job. That's what ``getActions()`` is used for. Here actions are hard-coded, but it could be generated by another method or something else.
  - ``filters`` : the selection filter to tell the job which items it will work on. It's used by the Reader.

Once the Operation is created, you must register it as a service in the DIC with the ``pim_catalog.mass_edit_action`` tag:

.. literalinclude:: ../../src/Acme/Bundle/EnrichBundle/Resources/config/mass_actions.yml
   :language: yaml
   :prepend: # /src/Acme/Bundle/EnrichBundle/Resources/config/mass_actions.yml
   :linenos:

.. note::

    The alias will be used in the URL (``/enrich/mass-edit-action/capitalize-values/configure``)

Phase 2: Create the FormType
-----------------------------

.. tip::

    As the **Operation** is used to build configuration, we could need a ``FormType`` that will be shown during the configuration step on the UI. Use it to show whatever is usefull to you: Select, Input...

For this cookbook, we do not need the user to configure this action, so we'll use an empty ``FormType``:

.. literalinclude:: ../../src/Acme/Bundle/EnrichBundle/Form/Type/MassEditAction/CapitalizeValuesType.php
  :language: php
  :prepend: // /src/Acme/Bundle/EnrichBundle/Form/Type/MassEditAction/CapitalizeValuesType.php
  :linenos:

Don't forget to register it as a service in the DI:

.. code-block:: yaml

    # /src/Acme/Bundle/EnrichBundle/Resources/config/form_types.yml
    services:
        acme.form.type.capitalize_values:
            class: Acme\Bundle\EnrichBundle\Form\Type\MassEditAction\CapitalizeValuesType
            arguments:
                - Acme\Bundle\EnrichBundle\MassEditAction\Operation\CapitalizeValues
            tags:
                - { name: form.type, alias: acme_enrich_operation_capitalize_values }

The ``FormType`` is now linked to the Operation with its name.
You need to create a template to render your Mass Edit Action form:

.. literalinclude::
   ../../src/Acme/Bundle/EnrichBundle/Resources/views/MassEditAction/configure/capitalize-values.html.twig
   :language: jinja
   :prepend: #  /src/Acme/Bundle/EnrichBundle/Resources/views/MassEditAction/configure/capitalize-values.html.twig
   :linenos:

.. note::

    It will be visible in the **configure** step of the mass edit.

Phase 3: Create the Processor
-----------------------------

Well! Now the user can select the Operation to launch it. The Operation will send its config (``filters``, and ``actions``) to a background job process. Now we have to write the Processor that will handle product modifications.

The ``Processor`` receives products one by one, given by the ``Reader``:

.. literalinclude:: ../../src/Acme/Bundle/EnrichBundle/Processor/MassEdit/CapitalizeValuesProcessor.php
    :language: php
    :prepend: // /src/Acme/Bundle/EnrichBundle/Processor/MassEdit/CapitalizeValuesProcessor.php
    :linenos:

Again, register the newly created class:

.. literalinclude:: ../../src/Acme/Bundle/EnrichBundle/Resources/config/processors.yml
    :language: yaml
    :prepend: # /src/Acme/Bundle/EnrichBundle/Resources/config/processors.yml
    :linenos:

Phase 4: Create the background Job
----------------------------------

.. tip::

    The Job will run 3 steps: **Read**, **Process** & **Write**. In this cookbook, we use existing Reader and Writer.

We just wrote the Processor in the previous phase, so let's tell the Job which services to use!

.. literalinclude:: ../../src/Acme/Bundle/EnrichBundle/Resources/config/batch_jobs.yml
    :language: yaml
    :emphasize-lines: 12-14
    :prepend: # /src/Acme/Bundle/EnrichBundle/Resources/config/batch_jobs.yml
    :linenos:

The Job has to be in your database, so add it to your fixtures:

.. literalinclude:: ../../src/Acme/Bundle/EnrichBundle/Resources/fixtures/jobs.yml
    :language: yaml
    :prepend: # /src/Acme/Bundle/EnrichBundle/Resources/fixtures/jobs.yml
    :linenos:

.. note::

    To better understand how to handle this, you can read this chapter: :ref:`add-your-own-data`

Phase 5: Translating the Mass Edit Action Choice
------------------------------------------------

Once you have realized the previous operations (and eventually cleared your cache), you should see a new option on the ``/enrich/mass-edit-action/choose`` page.

Akeneo will generate for you a translation key following this pattern:
``pim_enrich.mass_edit_action.%alias%.label``.

You may now define some translation keys (``label, description and success_flash``) in your translation catalog(s).
